/* # BEM ---------- */
/* bem-index [function] */
[data-module="BEM"] [data-test="bem-index [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns first index of bem separator"; }
[data-module="BEM"] [data-test="bem-index [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns first index of bem separator"; }
[data-module="BEM"] [data-test="bem-index [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns first index of bem separator"; }

/* get-block [function] */
[data-module="BEM"] [data-test="get-block [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns bem block from string"; }
[data-module="BEM"] [data-test="get-block [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns bem block from string"; }
[data-module="BEM"] [data-test="get-block [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns bem block from string"; }

/* is-block [function] */
[data-module="BEM"] [data-test="is-block [function]"] .assert-equal {
  -result: PASS;
  -description: "Checks if given string is block"; }
[data-module="BEM"] [data-test="is-block [function]"] .assert-equal {
  -result: PASS;
  -description: "Checks if given string is block"; }
[data-module="BEM"] [data-test="is-block [function]"] .assert-equal {
  -result: PASS;
  -description: "Checks if given string is block"; }

/* is-element [function] */
[data-module="BEM"] [data-test="is-element [function]"] .assert-equal {
  -result: PASS;
  -description: "Checks if given string is element"; }
[data-module="BEM"] [data-test="is-element [function]"] .assert-equal {
  -result: PASS;
  -description: "Checks if given string is element"; }
[data-module="BEM"] [data-test="is-element [function]"] .assert-equal {
  -result: PASS;
  -description: "Checks if given string is element"; }

/* is-modifier [function] */
[data-module="BEM"] [data-test="is-modifier [function]"] .assert-equal {
  -result: PASS;
  -description: "Checks if given string is modifier"; }
[data-module="BEM"] [data-test="is-modifier [function]"] .assert-equal {
  -result: PASS;
  -description: "Checks if given string is modifier"; }
[data-module="BEM"] [data-test="is-modifier [function]"] .assert-equal {
  -result: PASS;
  -description: "Checks if given string is modifier"; }

/* math-min [function] */
[data-module="BEM"] [data-test="math-min [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns smallest number from 2 numbers, or default"; }
[data-module="BEM"] [data-test="math-min [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns smallest number from 2 numbers, or default"; }
[data-module="BEM"] [data-test="math-min [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns smallest number from 2 numbers, or default"; }
[data-module="BEM"] [data-test="math-min [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns smallest number from 2 numbers, or default"; }
[data-module="BEM"] [data-test="math-min [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns smallest number from 2 numbers, or default"; }

/* explode [function] */
[data-module="BEM"] [data-test="explode [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns list from string"; }

/* block [mixin] */
[data-module="BEM"] [data-test="block [mixin]"] [data-assert="Creates block type selector"] .input .list {
  background-color: orange; }
[data-module="BEM"] [data-test="block [mixin]"] [data-assert="Creates block type selector"] .expect .list {
  background-color: orange; }

/* element [mixin] */
[data-module="BEM"] [data-test="element [mixin]"] [data-assert="Creates element type selector"] .input .list__item {
  background-color: red; }
[data-module="BEM"] [data-test="element [mixin]"] [data-assert="Creates element type selector"] .expect .list__item {
  background-color: red; }

/* modifier [mixin] */
[data-module="BEM"] [data-test="modifier [mixin]"] [data-assert="Creates modifier type selector"] .input .list--inline {
  background-color: green; }
[data-module="BEM"] [data-test="modifier [mixin]"] [data-assert="Creates modifier type selector"] .expect .list--inline {
  background-color: green; }

/* duo [mixin] */
[data-module="BEM"] [data-test="duo [mixin]"] [data-assert="Relates same classed neighbour elements"] .input .list__item + .list__item {
  margin-left: 10px; }
[data-module="BEM"] [data-test="duo [mixin]"] [data-assert="Relates same classed neighbour elements"] .expect .list__item + .list__item {
  margin-left: 10px; }

/* is [mixin] */
[data-module="BEM"] [data-test="is [mixin]"] [data-assert="Addes state to selector"] .input a.is-active {
  font-weight: bold; }
[data-module="BEM"] [data-test="is [mixin]"] [data-assert="Addes state to selector"] .expect a.is-active {
  font-weight: bold; }

/* hover [mixin] */
[data-module="BEM"] [data-test="hover [mixin]"] [data-assert="Addes hover state to selector"] .input a:hover {
  color: red; }
[data-module="BEM"] [data-test="hover [mixin]"] [data-assert="Addes hover state to selector"] .expect a:hover {
  color: red; }

/* focus [mixin] */
[data-module="BEM"] [data-test="focus [mixin]"] [data-assert="Addes focus state to selector"] .input a:focus {
  color: blue; }
[data-module="BEM"] [data-test="focus [mixin]"] [data-assert="Addes focus state to selector"] .expect a:focus {
  color: blue; }

/* active [mixin] */
[data-module="BEM"] [data-test="active [mixin]"] [data-assert="Addes active state to selector"] .input a:active {
  color: green; }
[data-module="BEM"] [data-test="active [mixin]"] [data-assert="Addes active state to selector"] .expect a:active {
  color: green; }

/* checked [mixin] */
[data-module="BEM"] [data-test="checked [mixin]"] [data-assert="Addes checked state to selector"] .input input:checked {
  display: block; }
[data-module="BEM"] [data-test="checked [mixin]"] [data-assert="Addes checked state to selector"] .expect input:checked {
  display: block; }

/* disabled [mixin] */
[data-module="BEM"] [data-test="disabled [mixin]"] [data-assert="Addes disabled state to selector"] .input button[disabled] {
  opacity: 0.8; }
[data-module="BEM"] [data-test="disabled [mixin]"] [data-assert="Addes disabled state to selector"] .expect button[disabled] {
  opacity: 0.8; }

/* readonly [mixin] */
[data-module="BEM"] [data-test="readonly [mixin]"] [data-assert="Addes readonly state to selector"] .input input[readonly] {
  cursor: default; }
[data-module="BEM"] [data-test="readonly [mixin]"] [data-assert="Addes readonly state to selector"] .expect input[readonly] {
  cursor: default; }

/* contenteditable [mixin] */
[data-module="BEM"] [data-test="contenteditable [mixin]"] [data-assert="Addes contenteditable state to selector"] .input .box[contenteditable="true"] {
  border-color: orange; }
[data-module="BEM"] [data-test="contenteditable [mixin]"] [data-assert="Addes contenteditable state to selector"] .expect .box[contenteditable="true"] {
  border-color: orange; }

/* first [mixin] */
[data-module="BEM"] [data-test="first [mixin]"] [data-assert="Takes pseudo element of selector"] .input a:first-child {
  color: orange; }
[data-module="BEM"] [data-test="first [mixin]"] [data-assert="Takes pseudo element of selector"] .expect a:first-child {
  color: orange; }

/* last [mixin] */
[data-module="BEM"] [data-test="last [mixin]"] [data-assert="Takes pseudo element of selector"] .input a:last-child {
  color: blue; }
[data-module="BEM"] [data-test="last [mixin]"] [data-assert="Takes pseudo element of selector"] .expect a:last-child {
  color: blue; }

/* even [mixin] */
[data-module="BEM"] [data-test="even [mixin]"] [data-assert="Takes pseudo element of selector"] .input a:nth-child(even) {
  color: green; }
[data-module="BEM"] [data-test="even [mixin]"] [data-assert="Takes pseudo element of selector"] .expect a:nth-child(even) {
  color: green; }

/* odd [mixin] */
[data-module="BEM"] [data-test="odd [mixin]"] [data-assert="Takes pseudo element of selector"] .input a:nth-child(odd) {
  color: aqua; }
[data-module="BEM"] [data-test="odd [mixin]"] [data-assert="Takes pseudo element of selector"] .expect a:nth-child(odd) {
  color: aqua; }

/* before [mixin] */
[data-module="BEM"] [data-test="before [mixin]"] [data-assert="Creates pseudo element of selector"] .input a:before {
  color: orange; }
[data-module="BEM"] [data-test="before [mixin]"] [data-assert="Creates pseudo element of selector"] .expect a:before {
  color: orange; }

/* after [mixin] */
[data-module="BEM"] [data-test="after [mixin]"] [data-assert="Creates pseudo element of selector"] .input a:after {
  color: red; }
[data-module="BEM"] [data-test="after [mixin]"] [data-assert="Creates pseudo element of selector"] .expect a:after {
  color: red; }

/* # SUMMARY ---------- */
/* 25 Tests: */
/*  - 7 Passed */
/*  - 0 Failed */
/*  - 18 Output to CSS */
/* -------------------- */

/*# sourceMappingURL=style.css.map */
