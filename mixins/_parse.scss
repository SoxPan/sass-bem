@charset "UTF-8";

/// Parse multiple mixins, pseudo elements and other states.
///
/// @param {String | List} $selectors - List or String of arguments, to generate selector.
///
/// @example scss - Usage
///     @include b('list') {
///         @include parse('&', 'm:inline', ':hover', '[disabled]') {
///             color: black;
///         }
///     }
///
/// @example css - Output
///     .list, .list--inline, .list:hover, .list[disabled] {
///         color: black;
///     }
///
/// @requires {function} explode
/// @requires {function} implode

@mixin parse($selectors...) {
	$parent: unquote("#{&}");
	$collection: ();

	//
	@each $selector in $selectors {
		$parts: explode($selector, ':');

		//
		@if (str-length(nth($parts, 1)) == 0) {
			$selector: unquote("#{$parent}:#{nth($parts, 2)}");
		}

		//
		@else if(length($parts) == 1) {

			//
			@if (nth($parts, 1) == '&') {
				$selector: $parent;
			}

			//
			@else {
				$selector: unquote("#{$parent}#{nth($parts, 1)}");
			}
		}

		//
		@else {

			//
			@if mixin-exists(nth($parts, 1)) {
				$function: unquote("#{nth($parts, 1)}-selector");
				$selector: call($function, nth($parts, 2));
			}

				//
			@else {
				@error "Mixin #{nth($parts, 1)} doesn't exists!";
			}
		}

		//
		$collection: append($collection, $selector);
	}

	//
	@at-root {
		#{implode($collection, ', ')} {
			@content;
		}
	}
}